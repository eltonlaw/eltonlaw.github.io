3:I[5613,[],""]
4:I[1778,[],""]
5:I[5250,["250","static/chunks/250-e6a6f086b85a6178.js","404","static/chunks/app/blog/page-de834b81a5f504c7.js"],""]
2:Tcfe,/**
  * @brief Reset and Clock Control
  */
typedef struct
{
  __IO uint32_t CR;          /*!< RCC Clock Sources Control Register,                                     Address offset: 0x00 */
  __IO uint32_t ICSCR;       /*!< RCC Internal Clock Sources Calibration Register,                        Address offset: 0x04 */
  __IO uint32_t CFGR;        /*!< RCC Regulated Domain Clocks Configuration Register,                     Address offset: 0x08 */
  __IO uint32_t PLLCFGR;     /*!< RCC System PLL configuration Register,                                  Address offset: 0x0C */
  __IO uint32_t RESERVED0;   /*!< Reserved,                                                               Address offset: 0x10 */
  __IO uint32_t RESERVED1;   /*!< Reserved,                                                               Address offset: 0x14 */
  __IO uint32_t CIER;        /*!< RCC Clock Interrupt Enable Register,                                    Address offset: 0x18 */
  __IO uint32_t CIFR;        /*!< RCC Clock Interrupt Flag Register,                                      Address offset: 0x1C */
  __IO uint32_t CICR;        /*!< RCC Clock Interrupt Clear Register,                                     Address offset: 0x20 */
  __IO uint32_t IOPRSTR;     /*!< RCC IO port reset register,                                             Address offset: 0x24 */
  __IO uint32_t AHBRSTR;     /*!< RCC AHB peripherals reset register,                                     Address offset: 0x28 */
  __IO uint32_t APBRSTR1;    /*!< RCC APB peripherals reset register 1,                                   Address offset: 0x2C */
  __IO uint32_t APBRSTR2;    /*!< RCC APB peripherals reset register 2,                                   Address offset: 0x30 */
  __IO uint32_t IOPENR;      /*!< RCC IO port enable register,                                            Address offset: 0x34 */
  __IO uint32_t AHBENR;      /*!< RCC AHB peripherals clock enable register,                              Address offset: 0x38 */
  __IO uint32_t APBENR1;     /*!< RCC APB peripherals clock enable register1,                             Address offset: 0x3C */
  __IO uint32_t APBENR2;     /*!< RCC APB peripherals clock enable register2,                             Address offset: 0x40 */
  __IO uint32_t IOPSMENR;    /*!< RCC IO port clocks enable in sleep mode register,                       Address offset: 0x44 */
  __IO uint32_t AHBSMENR;    /*!< RCC AHB peripheral clocks enable in sleep mode register,                Address offset: 0x48 */
  __IO uint32_t APBSMENR1;   /*!< RCC APB peripheral clocks enable in sleep mode register1,               Address offset: 0x4C */
  __IO uint32_t APBSMENR2;   /*!< RCC APB peripheral clocks enable in sleep mode register2,               Address offset: 0x50 */
  __IO uint32_t CCIPR;       /*!< RCC Peripherals Independent Clocks Configuration Register,              Address offset: 0x54 */
  __IO uint32_t RESERVED2;   /*!< Reserved,                                                               Address offset: 0x58 */
  __IO uint32_t BDCR;        /*!< RCC Backup Domain Control Register,                                     Address offset: 0x5C */
  __IO uint32_t CSR;         /*!< RCC Unregulated Domain Clock Control and Status Register,               Address offset: 0x60 */
} RCC_TypeDef;
0:["-wPj9oBZbLc79UlVXP7vj",[[["",{"children":["blog",{"children":["2024-06-09-grow-box-part-1",{"children":["__PAGE__",{}]}]}]},"$undefined","$undefined",true],["",{"children":["blog",{"children":["2024-06-09-grow-box-part-1",{"children":["__PAGE__",{},["$L1",[["$","div",null,{"className":"postFrontmatter","children":[["$","h2",null,{"className":"PostFrontmatter_postTitle__fY2bg","children":"Building a Grow Box Pt.1 - STM32 build basics"}],["$","span",null,{"className":"PostFrontmatter_postDate__ncWjv","children":"2024-06-09 23:56PM"}]]}],"\n",["$","p",null,{"children":["I've been using the STM32CubeIDE to build and flash the firmware, it's not bad and it works but I have a few issues. Why doesn't flashing the device have a keyboard shortcut? As a former front end developer I need to click this button every 10 seconds or I'll die. Hot reloading and access to a REPL have ruined me. There are other quality of life issues I have, but these could possibly be chalked up to user error since I'm a crusty fart about Vim and half my brain is permanently occupied by keybindings. The IDE doesn't run on my laptop for some reason (possibly an incompatibility with Wayland). I don't like the idea of tying the build process to closely to the IDE because then the repo is a lot more dependent on the local system and CI is hard to setup. I'm not sure what's happening to the code during the build process. So I decided to build a simpler project with just Make and the ",["$","a",null,{"href":"https://github.com/STMicroelectronics/STM32CubeG0","children":"ST provided CMSIS"}]," for the G070. CMSIS (Cortex Microcontroller Software Interface Standard) is a vendor-independent hardware abstraction layer for the ARM Cortex processor series. You can't simply use the code for one processor for some other processor but there are standardized software APIs for system initialization and configuration and so on. Interactions with the CPU will be through bit twiddling registers. I like reading datasheets, makes me feel like a real engineer."]}],"\n",["$","p",null,{"children":"The STM32G070RB is a 32-bit Cortex M0+ CPU which means it implements the ARMv6-M instruction set, this is not the same as the ARMv6 Thumb instruction set though they are closely aligned."}],"\n",["$","p",null,{"children":"To start, we'll build and flash a simple blinky using the built-in LED on the Nucleo dev board I'm working with. At a high level:"}],"\n",["$","ol",null,{"children":["\n",["$","li",null,{"children":"Hook up a cross compilation toolchain into Make"}],"\n",["$","li",null,{"children":["Compile some code that:","\n",["$","ol",null,{"children":["\n",["$","li",null,{"children":"Initialize the system clock (we'll need it to use delay)"}],"\n",["$","li",null,{"children":"Initialize one of the GPIO peripherals"}],"\n",["$","li",null,{"children":"Configure the pin the LED is connected to for output (from the schematic, GPIO PORT A, PIN5)"}],"\n",["$","li",null,{"children":"Loop forever: toggle pin, wait 1 second"}],"\n"]}],"\n"]}],"\n"]}],"\n",["$","p",null,{"children":"Grab the CMSIS files:"}],"\n",["$","pre",null,{"children":["$","code",null,{"children":"git submodule add git@github.com:STMicroelectronics/STM32CubeG0.git \n"}]}],"\n",["$","p",null,{"children":"It's a standard C compile, but using the ARM toolchain:"}],"\n",["$","pre",null,{"children":["$","code",null,{"children":"CC=arm-none-eabi-gcc\nCFLAGS=-mcpu=cortex-m0plus -mthumb -g -O0\nCFLAGS+=-I./STM32CubeG0/Drivers/CMSIS/Device/ST/STM32G0xx/Include\nCFLAGS+=-I./STM32CubeG0/Drivers/CMSIS/Include\nCFLAGS+=-I./src\nLDFLAGS=-Tlinker_script.ld -nostartfiles\nOBJCOPY=arm-none-eabi-objcopy\n\nSRC = $(wildcard src/*.c)\n\nall: main.bin\n\nmain.bin: main.elf\n\t$(OBJCOPY) -O binary $< $@\n\nmain.elf: $(SRC)\n\t$(CC) $(CFLAGS) $(LDFLAGS) $^ -o $@\n\nclean:\n\trm -f *.elf *.bin\n\nflash: main.bin\n\tSTM32_Programmer_CLI -c port=SWD -w main.bin 0x8000000 -rst\n"}]}],"\n",["$","p",null,{"children":["The ",["$","code",null,{"children":"flash"}]," recipe at the end writes the final binary file to where flash memory starts on the processor (found in the datasheet). The processor is connected to an intermediary device (ST-LINK) by two pins SWCLK (serial wire clock) and SWDIO (serial wire data I/O), this is a debug interface called SWD. This intermediary device bridges SWD to USB-B and that's what talks to the ",["$","code",null,{"children":"STM32_Programmer_CLI"}]]}],"\n",["$","p",null,{"children":["The source file ",["$","code",null,{"children":"src/main.c"}]," will just be a no-op for now."]}],"\n",["$","pre",null,{"children":["$","code",null,{"children":"#define STM32G070xx\n#include \"stm32g0xx.h\"\n\nint main(void) {\n    while (1) { }\n}\n"}]}],"\n",["$","p",null,{"children":[["$","code",null,{"children":"#define STM32G070xx"}]," is needed because ",["$","code",null,{"children":"#include \"stm32g0xx.h\""}]," is a wrapper header file for the the entire G0 family, including the processor-specific headers only when the a processor specific define exists. Adding ",["$","code",null,{"children":"#define STM32G070xx"}]," links in ",["$","code",null,{"children":"STM32CubeG0/Drivers/CMSIS/Device/ST/STM32G0xx/Include/stm32g070xx.h"}]," (from the CMSIS git submodule earlier) which has all the register and bit definitions, address mappings and structs needed to use the peripherals. This way we don't have to write binary directly, but can bit bang with definitions. Now we can start writing the firmware."]}],"\n",["$","h3",null,{"children":"Stepping through the program"}],"\n",["$","p",null,{"children":"On-chip debugging is a way to run, pause and inspect the state of the hardware as your code runs. As mentioned previously, the STM32G070 has a SWD interface, providing the pins SWDIO and SWCLK. The nucleo board I'm using has an ST-LINK interface on it, a separate chip, which is what manages the USB connection to the computer. This is physically wired to the SWDIO and SWCLK on the microcontroller and USB commands are converted to the appropriate signals on those pins."}],"\n",["$","p",null,{"children":["In practise, ",["$","a",null,{"href":"https://openocd.org/pages/documentation.html","children":"OpenOCD"}]," starts a server that connects to the microcontroller and client programs (GDB, telnet or TCL) control the microcontroller through it. The server needs to be configured so it can properly send and receive data but there's a ",["$","a",null,{"href":"https://github.com/openocd-org/openocd/tree/e4c0904731320c686e5074e68db8358e2f3ce83d/tcl","children":"bunch of standard configurations provided on GitHub"}],", so after cloning that repo, starting the OpenOCD server, for my setup:"]}],"\n",["$","pre",null,{"children":["$","code",null,{"children":"openocd -f interface/stlink.cfg -f target/stm32g0x.cfg  -s $(pwd)/openocd/tcl\n"}]}],"\n",["$","p",null,{"children":"Start a GDB server"}],"\n",["$","pre",null,{"children":["$","code",null,{"children":"arm-none-eabi-gdb main.elf\n"}]}],"\n",["$","p",null,{"children":"Connect GDB server to OpenOCD server, and load the program."}],"\n",["$","pre",null,{"children":["$","code",null,{"children":"target remote :3333\nload\nmonitor halt\nmonitor reset init\n"}]}],"\n",["$","p",null,{"children":"Testing the connection with:"}],"\n",["$","pre",null,{"children":["$","code",null,{"children":"int main(void) {\n    int x;\n    while (1) {\n        x = add(x, 3);\n    }\n}\n"}]}],"\n",["$","p",null,{"children":["...And stepping through it shows ",["$","code",null,{"children":"x += 3"}]," each loop indicating the code has compiled and flashed correctly!"]}],"\n",["$","pre",null,{"children":["$","code",null,{"children":"(gdb) break main\nBreakpoint 1 at 0x800010e: file src/main.c, line 19.\nNote: automatically using hardware breakpoints for read-only addresses.\n(gdb) continue\nContinuing.\n\nBreakpoint 1, main () at src/main.c:19\n19          int x = 0;\n(gdb) step\nhalted: PC: 0x08000110\nhalted: PC: 0x08000112\n21              x = add(x, 3);\n(gdb) step\nhalted: PC: 0x08000114\nhalted: PC: 0x08000116\nhalted: PC: 0x08000118\nhalted: PC: 0x08000248\nadd (a=0, b=3) at src/gpio.c:2\n2               return a + b;\n(gdb) step\nhalted: PC: 0x08000254\nhalted: PC: 0x08000256\nhalted: PC: 0x08000258\n3       }\n(gdb) step\nhalted: PC: 0x0800025a\nhalted: PC: 0x0800025c\nhalted: PC: 0x0800025e\nhalted: PC: 0x0800011c\nhalted: PC: 0x0800011e\nhalted: PC: 0x08000120\nhalted: PC: 0x08000112\nhalted: PC: 0x08000114\nhalted: PC: 0x08000116\nhalted: PC: 0x08000118\nhalted: PC: 0x08000248\nadd (a=3, b=3) at src/gpio.c:2\n2               return a + b;\n"}]}],"\n",["$","h3",null,{"children":"ARMv6-M"}],"\n",["$","h3",null,{"children":"Initializing the System Clock"}],"\n",["$","p",null,{"children":"RCC (Reset and Clock Control) manages system and peripheral clocks. From the CMSIS, these are all the registers used, they each map to some physical entity in the hardware:"}],"\n",["$","pre",null,{"children":["$","code",null,{"children":"$2"}]}],"\n",["$","p",null,{"children":"SysTick is a standard component of the ARM Cortex-M cores and can be used for context switching or implementing sleep/delay functions among other things. It is a 24-bit clear-on-write timer that has some initial value and decrements every clock cycle. When it hits 0 it'll generate a SysTick interrupt. There's a provided function for configuring this already:"}],"\n",["$","pre",null,{"children":["$","code",null,{"children":"__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)\n{\n  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)\n  {\n    return (1UL);                                                   /* Reload value impossible */\n  }\n\n  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */\n  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */\n  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */\n  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |\n                   SysTick_CTRL_TICKINT_Msk   |\n                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */\n  return (0UL);                                                     /* Function successful */\n}\n"}]}],"\n",["$","ul",null,{"children":["\n",["$","li",null,{"children":[["$","code",null,{"children":"ticks"}]," is the number of clock ticks per interrupt."]}],"\n",["$","li",null,{"children":[["$","code",null,{"children":"SysTick->VAL"}]," is the tick counter and it gets set to 0 so that we're at known state."]}],"\n",["$","li",null,{"children":[["$","code",null,{"children":"SysTick_CTRL_TICKINT_Msk"}]," is a uint32 with just the bit that enables the SysTick interrupt set to 1"]}],"\n",["$","li",null,{"children":[["$","code",null,{"children":"SysTick_CTRL_ENABLE_Msk"}]," is a uint32 with just the bit that enables decrementing ",["$","code",null,{"children":"SysTick->VAL"}]]}],"\n",["$","li",null,{"children":[["$","code",null,{"children":"SysTick_CTRL_CLKSOURCE_Msk"}]," is a uint32 with just the bit that sets the processor clock as source for the SysTick timer"]}],"\n",["$","li",null,{"children":["Oddly in the ST provided HAL, there's a ",["$","code",null,{"children":"__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)"}]," called as part of ",["$","code",null,{"children":"HAL_StatusTypeDef HAL_Init(void)"}]," and it's passing in ",["$","code",null,{"children":"#define  TICK_INT_PRIORITY            0U"}],", setting it to 0 (highest priority) whereas CMSIS is setting it as 3 (lowest priority, it's a 2 bit value). So as is, SysTick stuff will be less accurate if there's a lot of higher priority interrupts generated. I'll leave it as is for now."]}],"\n"]}],"\n",["$","p",null,{"children":["Earlier, the processor clock was set at 16 MHz or 16 million cycles per second so to setup ",["$","code",null,{"children":"SysTick"}]," for 1ms per tick. This usually isn't hardcoded so that there's the option of calling a ",["$","code",null,{"children":"void SystemCoreClockUpdate(void)"}]," but I don't think I need that right now."]}],"\n",["$","pre",null,{"children":["$","code",null,{"children":"SysTick_Config(16000)\n"}]}],"\n",["$","p",null,{"children":["One last thing, when enabling interrupts, it's important to define their associated handlers. From the device specific ",["$","code",null,{"children":"startup.s"}]," file, all interrupts handlers are declared as weak symbols that default to a ",["$","code",null,{"children":"Default_Handler"}]," which is a no-op infinite loop."]}],"\n",["$","pre",null,{"children":["$","code",null,{"children":"...\n.global Default_Handler\n\n  ...\n  .section .text.Default_Handler,\"ax\",%progbits\nDefault_Handler:\nInfinite_Loop:\n  b Infinite_Loop\n  .size Default_Handler, .-Default_Handler\n\n  ...\n  .weak      SysTick_Handler\n  .thumb_set SysTick_Handler,Default_Handler\n"}]}],"\n",["$","p",null,{"children":["So if SysTick is enabled and generates an interrupt without a definitive definition of ",["$","code",null,{"children":"SysTick_Handler"}],", it'll hang forever. Since we've configured it to hit 0 every 1ms, simply incrementing a number every interrupt counts the milliseconds since initialization."]}],"\n",["$","pre",null,{"children":["$","code",null,{"children":"volatile uint32_t uw_tick = 0;\n\nvoid SysTick_Handler(void) {\n    uw_tick++;\n}\n"}]}],"\n",["$","p",null,{"children":["At a rate of a tick per 1 ms, it'll only overflow after 2^32 or 4,294,967,296 ms (~49.71 days). Overflow will be handled later, but since this code will be called in such a tight loop, logic will instead be put into everything that uses ",["$","code",null,{"children":"uw_tick"}],"."]}],"\n",["$","h3",null,{"children":"References"}],"\n",["$","ul",null,{"children":["\n",["$","li",null,{"children":"STM32CubeG0/Drivers/CMSIS/Include/core_cm0plus.h"}],"\n"]}]],null]]},["$","$L3",null,{"parallelRouterKey":"children","segmentPath":["children","blog","children","2024-06-09-grow-box-part-1","children"],"loading":"$undefined","loadingStyles":"$undefined","loadingScripts":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L4",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","styles":[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/bd17e4652862e3d3.css","precedence":"next","crossOrigin":""}]]}]]},["$","$L3",null,{"parallelRouterKey":"children","segmentPath":["children","blog","children"],"loading":"$undefined","loadingStyles":"$undefined","loadingScripts":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L4",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","styles":null}]]},[null,["$","html",null,{"lang":"en","children":["$","body",null,{"children":["$","div",null,{"className":"RootLayout_container__tH3RP","children":[["$","div",null,{"className":"RootLayout_masthead__LsRd7","children":[["$","h3",null,{"className":"$undefined","children":[["$","$L5",null,{"className":"RootLayout_titleLink__VQPJ9","href":"/","children":"eltonlaw"}],["$","small",null,{"children":" sundries"}]]}],["$","$L5",null,{"className":"RootLayout_titleLink__VQPJ9","href":"https://github.com/eltonlaw","children":["$","svg",null,{"viewBox":"0 0 16 16","width":"16px","height":"16px","children":["$","path",null,{"fill":"#828282","d":"M7.999,0.431c-4.285,0-7.76,3.474-7.76,7.761 c0,3.428,2.223,6.337,5.307,7.363c0.388,0.071,0.53-0.168,0.53-0.374c0-0.184-0.007-0.672-0.01-1.32 c-2.159,0.469-2.614-1.04-2.614-1.04c-0.353-0.896-0.862-1.135-0.862-1.135c-0.705-0.481,0.053-0.472,0.053-0.472 c0.779,0.055,1.189,0.8,1.189,0.8c0.692,1.186,1.816,0.843,2.258,0.645c0.071-0.502,0.271-0.843,0.493-1.037 C4.86,11.425,3.049,10.76,3.049,7.786c0-0.847,0.302-1.54,0.799-2.082C3.768,5.507,3.501,4.718,3.924,3.65 c0,0,0.652-0.209,2.134,0.796C6.677,4.273,7.34,4.187,8,4.184c0.659,0.003,1.323,0.089,1.943,0.261 c1.482-1.004,2.132-0.796,2.132-0.796c0.423,1.068,0.157,1.857,0.077,2.054c0.497,0.542,0.798,1.235,0.798,2.082 c0,2.981-1.814,3.637-3.543,3.829c0.279,0.24,0.527,0.713,0.527,1.437c0,1.037-0.01,1.874-0.01,2.129 c0,0.208,0.14,0.449,0.534,0.373c3.081-1.028,5.302-3.935,5.302-7.362C15.76,3.906,12.285,0.431,7.999,0.431z"}]}]}]]}],["$","$L3",null,{"parallelRouterKey":"children","segmentPath":["children"],"loading":"$undefined","loadingStyles":"$undefined","loadingScripts":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L4",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":[["$","title",null,{"children":"404: This page could not be found."}],["$","div",null,{"style":{"fontFamily":"system-ui,\"Segoe UI\",Roboto,Helvetica,Arial,sans-serif,\"Apple Color Emoji\",\"Segoe UI Emoji\"","height":"100vh","textAlign":"center","display":"flex","flexDirection":"column","alignItems":"center","justifyContent":"center"},"children":["$","div",null,{"children":[["$","style",null,{"dangerouslySetInnerHTML":{"__html":"body{color:#000;background:#fff;margin:0}.next-error-h1{border-right:1px solid rgba(0,0,0,.3)}@media (prefers-color-scheme:dark){body{color:#fff;background:#000}.next-error-h1{border-right:1px solid rgba(255,255,255,.3)}}"}}],["$","h1",null,{"className":"next-error-h1","style":{"display":"inline-block","margin":"0 20px 0 0","padding":"0 23px 0 0","fontSize":24,"fontWeight":500,"verticalAlign":"top","lineHeight":"49px"},"children":"404"}],["$","div",null,{"style":{"display":"inline-block"},"children":["$","h2",null,{"style":{"fontSize":14,"fontWeight":400,"lineHeight":"49px","margin":0},"children":"This page could not be found."}]}]]}]}]],"notFoundStyles":[],"styles":null}]]}]}]}],null]],[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/c85e7b0be5854569.css","precedence":"next","crossOrigin":""}]],"$L6"]]]]
6:[["$","meta","0",{"name":"viewport","content":"width=device-width, initial-scale=1"}],["$","meta","1",{"charSet":"utf-8"}],["$","title","2",{"children":"eltonlaw"}]]
1:null
